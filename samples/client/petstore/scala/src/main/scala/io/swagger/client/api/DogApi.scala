/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Dog
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DogApi(
  val defBasePath: String = "http://petstore.swagger.io:80/v2",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DogApiAsyncHelper(client, config)

  /**
   * Add a new dog to the store
   * 
   *
   * @param body Dog object that needs to be added to the store 
   * @return void
   */
  def addDog(body: Dog) = {
    val await = Try(Await.result(addDogAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add a new dog to the store asynchronously
   * 
   *
   * @param body Dog object that needs to be added to the store 
   * @return Future(void)
   */
  def addDogAsync(body: Dog) = {
      helper.addDog(body)
  }

  /**
   * Deletes a dog
   * 
   *
   * @param dogId Dog id to delete 
   * @param apiKey  (optional)
   * @return void
   */
  def deleteDog(dogId: Long, apiKey: Option[String] = None) = {
    val await = Try(Await.result(deleteDogAsync(dogId, apiKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Deletes a dog asynchronously
   * 
   *
   * @param dogId Dog id to delete 
   * @param apiKey  (optional)
   * @return Future(void)
   */
  def deleteDogAsync(dogId: Long, apiKey: Option[String] = None) = {
      helper.deleteDog(dogId, apiKey)
  }

  /**
   * Find dog by ID
   * Returns a single dog
   *
   * @param dogId ID of dog to return 
   * @return Dog
   */
  def getDogById(dogId: Long): Option[Dog] = {
    val await = Try(Await.result(getDogByIdAsync(dogId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Find dog by ID asynchronously
   * Returns a single dog
   *
   * @param dogId ID of dog to return 
   * @return Future(Dog)
   */
  def getDogByIdAsync(dogId: Long): Future[Dog] = {
      helper.getDogById(dogId)
  }

  /**
   * Update an existing dog
   * 
   *
   * @param body Dog object that needs to be added. 
   * @return void
   */
  def updateDog(body: Dog) = {
    val await = Try(Await.result(updateDogAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update an existing dog asynchronously
   * 
   *
   * @param body Dog object that needs to be added. 
   * @return Future(void)
   */
  def updateDogAsync(body: Dog) = {
      helper.updateDog(body)
  }

  /**
   * Updates a dog
   * 
   *
   * @param dogId ID of dog that needs to be updated 
   * @param name  (optional)
   * @param status  (optional)
   * @return void
   */
  def updateDogWithForm(dogId: Long, name: Option[String] = None, status: Option[String] = None) = {
    val await = Try(Await.result(updateDogWithFormAsync(dogId, name, status), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Updates a dog asynchronously
   * 
   *
   * @param dogId ID of dog that needs to be updated 
   * @param name  (optional)
   * @param status  (optional)
   * @return Future(void)
   */
  def updateDogWithFormAsync(dogId: Long, name: Option[String] = None, status: Option[String] = None) = {
      helper.updateDogWithForm(dogId, name, status)
  }

}

class DogApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addDog(body: Dog)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Dog]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/dog"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DogApi->addDog")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteDog(dogId: Long,
    apiKey: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/dog/{dogId}")
      replaceAll("\\{" + "dogId" + "\\}", dogId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    apiKey match {
      case Some(param) => headerParams += "api_key" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getDogById(dogId: Long)(implicit reader: ClientResponseReader[Dog]): Future[Dog] = {
    // create path and map variables
    val path = (addFmt("/dog/{dogId}")
      replaceAll("\\{" + "dogId" + "\\}", dogId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateDog(body: Dog)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Dog]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/dog"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DogApi->updateDog")

    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateDogWithForm(dogId: Long,
    name: Option[String] = None,
    status: Option[String] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/dog/{dogId}")
      replaceAll("\\{" + "dogId" + "\\}", dogId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
