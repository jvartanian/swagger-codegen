/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import java.math.BigDecimal
import io.swagger.client.model.Client
import io.swagger.client.model.EnumFormBody
import io.swagger.client.model.FakeBody
import io.swagger.client.model.FakeBody1
import io.swagger.client.model.FakeJsonFormDataBody
import io.swagger.client.model.OuterBoolean
import io.swagger.client.model.OuterComposite
import io.swagger.client.model.OuterNumber
import io.swagger.client.model.OuterString
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class FakeApi(
  val defBasePath: String = "http://petstore.swagger.io:80/v2",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new FakeApiAsyncHelper(client, config)

  /**
   * 
   * Test serialization of outer boolean types
   *
   * @param body Input boolean as post body (optional)
   * @return OuterBoolean
   */
  def fakeOuterBooleanSerialize(body: Option[Boolean] = None): Option[OuterBoolean] = {
    val await = Try(Await.result(fakeOuterBooleanSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of outer boolean types
   *
   * @param body Input boolean as post body (optional)
   * @return Future(OuterBoolean)
   */
  def fakeOuterBooleanSerializeAsync(body: Option[Boolean] = None): Future[OuterBoolean] = {
      helper.fakeOuterBooleanSerialize(body)
  }

  /**
   * 
   * Test serialization of object with outer number type
   *
   * @param body Input composite as post body (optional)
   * @return OuterComposite
   */
  def fakeOuterCompositeSerialize(body: Option[OuterComposite] = None): Option[OuterComposite] = {
    val await = Try(Await.result(fakeOuterCompositeSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of object with outer number type
   *
   * @param body Input composite as post body (optional)
   * @return Future(OuterComposite)
   */
  def fakeOuterCompositeSerializeAsync(body: Option[OuterComposite] = None): Future[OuterComposite] = {
      helper.fakeOuterCompositeSerialize(body)
  }

  /**
   * 
   * Test serialization of outer number types
   *
   * @param body Input number as post body (optional)
   * @return OuterNumber
   */
  def fakeOuterNumberSerialize(body: Option[BigDecimal] = None): Option[OuterNumber] = {
    val await = Try(Await.result(fakeOuterNumberSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of outer number types
   *
   * @param body Input number as post body (optional)
   * @return Future(OuterNumber)
   */
  def fakeOuterNumberSerializeAsync(body: Option[BigDecimal] = None): Future[OuterNumber] = {
      helper.fakeOuterNumberSerialize(body)
  }

  /**
   * 
   * Test serialization of outer string types
   *
   * @param body Input string as post body (optional)
   * @return OuterString
   */
  def fakeOuterStringSerialize(body: Option[String] = None): Option[OuterString] = {
    val await = Try(Await.result(fakeOuterStringSerializeAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * Test serialization of outer string types
   *
   * @param body Input string as post body (optional)
   * @return Future(OuterString)
   */
  def fakeOuterStringSerializeAsync(body: Option[String] = None): Future[OuterString] = {
      helper.fakeOuterStringSerialize(body)
  }

  /**
   * To test \&quot;client\&quot; model
   * To test \&quot;client\&quot; model
   *
   * @param body client model 
   * @return Client
   */
  def testClientModel(body: Client): Option[Client] = {
    val await = Try(Await.result(testClientModelAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * To test \&quot;client\&quot; model asynchronously
   * To test \&quot;client\&quot; model
   *
   * @param body client model 
   * @return Future(Client)
   */
  def testClientModelAsync(body: Client): Future[Client] = {
      helper.testClientModel(body)
  }

  /**
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   *
   * @param body  
   * @return void
   */
  def testEndpointParameters(body: FakeBody) = {
    val await = Try(Await.result(testEndpointParametersAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트  asynchronously
   * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
   *
   * @param body  
   * @return Future(void)
   */
  def testEndpointParametersAsync(body: FakeBody) = {
      helper.testEndpointParameters(body)
  }

  /**
   * To test enum parameters
   * To test enum parameters
   *
   * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
   * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
   * @param enumQueryStringArray Query parameter enum test (string array) (optional)
   * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
   * @param enumQueryInteger Query parameter enum test (double) (optional)
   * @return void
   */
  def testEnumParameters(enumHeaderStringArray: Option[List[String]] = None, enumHeaderString: Option[String] = Option("-efg"), enumQueryStringArray: Option[List[String]] = None, enumQueryString: Option[String] = Option("-efg"), enumQueryInteger: Option[Integer] = None) = {
    val await = Try(Await.result(testEnumParametersAsync(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * To test enum parameters asynchronously
   * To test enum parameters
   *
   * @param enumHeaderStringArray Header parameter enum test (string array) (optional)
   * @param enumHeaderString Header parameter enum test (string) (optional, default to -efg)
   * @param enumQueryStringArray Query parameter enum test (string array) (optional)
   * @param enumQueryString Query parameter enum test (string) (optional, default to -efg)
   * @param enumQueryInteger Query parameter enum test (double) (optional)
   * @return Future(void)
   */
  def testEnumParametersAsync(enumHeaderStringArray: Option[List[String]] = None, enumHeaderString: Option[String] = Option("-efg"), enumQueryStringArray: Option[List[String]] = None, enumQueryString: Option[String] = Option("-efg"), enumQueryInteger: Option[Integer] = None) = {
      helper.testEnumParameters(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger)
  }

  /**
   * To test enum parameters
   * To test enum parameters
   *
   * @param body  (optional)
   * @return void
   */
  def testEnumRequestBody(body: Option[EnumFormBody] = None) = {
    val await = Try(Await.result(testEnumRequestBodyAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * To test enum parameters asynchronously
   * To test enum parameters
   *
   * @param body  (optional)
   * @return Future(void)
   */
  def testEnumRequestBodyAsync(body: Option[EnumFormBody] = None) = {
      helper.testEnumRequestBody(body)
  }

  /**
   * test inline additionalProperties
   * 
   *
   * @param body request body 
   * @return void
   */
  def testInlineAdditionalProperties(body: Map[String, String]) = {
    val await = Try(Await.result(testInlineAdditionalPropertiesAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * test inline additionalProperties asynchronously
   * 
   *
   * @param body request body 
   * @return Future(void)
   */
  def testInlineAdditionalPropertiesAsync(body: Map[String, String]) = {
      helper.testInlineAdditionalProperties(body)
  }

  /**
   * test json serialization of form data
   * 
   *
   * @param body  
   * @return void
   */
  def testJsonFormData(body: FakeJsonFormDataBody) = {
    val await = Try(Await.result(testJsonFormDataAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * test json serialization of form data asynchronously
   * 
   *
   * @param body  
   * @return Future(void)
   */
  def testJsonFormDataAsync(body: FakeJsonFormDataBody) = {
      helper.testJsonFormData(body)
  }

}

class FakeApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def fakeOuterBooleanSerialize(body: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[OuterBoolean], writer: RequestWriter[Option[Boolean]]): Future[OuterBoolean] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/boolean"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fakeOuterCompositeSerialize(body: Option[OuterComposite] = None
    )(implicit reader: ClientResponseReader[OuterComposite], writer: RequestWriter[Option[OuterComposite]]): Future[OuterComposite] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/composite"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fakeOuterNumberSerialize(body: Option[BigDecimal] = None
    )(implicit reader: ClientResponseReader[OuterNumber], writer: RequestWriter[Option[BigDecimal]]): Future[OuterNumber] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/number"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def fakeOuterStringSerialize(body: Option[String] = None
    )(implicit reader: ClientResponseReader[OuterString], writer: RequestWriter[Option[String]]): Future[OuterString] = {
    // create path and map variables
    val path = (addFmt("/fake/outer/string"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testClientModel(body: Client)(implicit reader: ClientResponseReader[Client], writer: RequestWriter[Client]): Future[Client] = {
    // create path and map variables
    val path = (addFmt("/fake"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FakeApi->testClientModel")

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testEndpointParameters(body: FakeBody)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[FakeBody]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FakeApi->testEndpointParameters")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testEnumParameters(enumHeaderStringArray: Option[List[String]] = None,
    enumHeaderString: Option[String] = Option("-efg"),
    enumQueryStringArray: Option[List[String]] = None,
    enumQueryString: Option[String] = Option("-efg"),
    enumQueryInteger: Option[Integer] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    enumQueryStringArray match {
      case Some(param) => queryParams += "enum_query_string_array" -> param.toString
      case _ => queryParams
    }
    enumQueryString match {
      case Some(param) => queryParams += "enum_query_string" -> param.toString
      case _ => queryParams
    }
    enumQueryInteger match {
      case Some(param) => queryParams += "enum_query_integer" -> param.toString
      case _ => queryParams
    }
    enumHeaderStringArray match {
      case Some(param) => headerParams += "enum_header_string_array" -> param.toString
      case _ => headerParams
    }
    enumHeaderString match {
      case Some(param) => headerParams += "enum_header_string" -> param.toString
      case _ => headerParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testEnumRequestBody(body: Option[EnumFormBody] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Option[EnumFormBody]]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake/enum/form"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testInlineAdditionalProperties(body: Map[String, String])(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Map[String, String]]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake/inline-additionalProperties"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FakeApi->testInlineAdditionalProperties")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def testJsonFormData(body: FakeJsonFormDataBody)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[FakeJsonFormDataBody]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/fake/jsonFormData"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling FakeApi->testJsonFormData")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
